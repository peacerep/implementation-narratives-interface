{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h3\", null, \"Filter \" + _toDisplayString($data.title), 1 /* TEXT */), _createVNode(_component_el_checkbox, {\n    modelValue: $data.checkAll,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.checkAll = $event),\n    indeterminate: $data.isIndeterminate,\n    onChange: $options.handleCheckAllChange\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Check all\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"indeterminate\", \"onChange\"]), _createVNode(_component_el_checkbox_group, {\n    modelValue: $data.checkedOptions,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.checkedOptions = $event),\n    onChange: $options.handleCheckedOptionsChange\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.options, option => {\n      return _openBlock(), _createBlock(_component_el_checkbox, {\n        key: option,\n        label: option\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(option), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"label\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;6DACAA,oBAA2B,YAAvB,SAAO,oBAAGC,WAAK,kBAEnBC,aAKCC;gBAJYF,cAAQ;+DAARA,cAAQ;IAChBG,aAAa,EAAEH,qBAAe;IAC9BI,QAAM,EAAEC;;sBACR,MAAS,kBAAT,WAAS;;kEAGdJ,aAaoBK;gBAZPN,oBAAc;+DAAdA,oBAAc;IACtBI,QAAM,EAAEC;;sBAIT,MAAyB,oBAD7BE,oBAMcC,6BALOR,aAAO,EAAjBS,MAAM;2BADjBC,aAMcR;QAJTS,GAAG,EAAEF,MAAM;QACXG,KAAK,EAAEH;;0BAER,MAAU,mCAARA,MAAM","names":["_createElementVNode","$data","_createVNode","_component_el_checkbox","indeterminate","onChange","$options","_component_el_checkbox_group","_createElementBlock","_Fragment","option","_createBlock","key","label"],"sourceRoot":"","sources":["C:\\OneDrive\\Implementation Report Interface\\implementation-tracker-vue\\implementation-tracker\\src\\components\\asideFilter.vue"],"sourcesContent":["<template>\r\n<h3>Filter {{ title }}</h3>\r\n\r\n<el-checkbox\r\n    v-model=\"checkAll\"\r\n    :indeterminate=\"isIndeterminate\"\r\n    @change=\"handleCheckAllChange\"\r\n    >Check all</el-checkbox\r\n>\r\n\r\n<el-checkbox-group\r\n    v-model=\"checkedOptions\"\r\n    @change=\"handleCheckedOptionsChange\"\r\n>\r\n\r\n<el-checkbox \r\n    v-for=\"option in options\" \r\n    :key=\"option\" \r\n    :label=\"option\"\r\n>\r\n    {{option}}\r\n</el-checkbox>\r\n\r\n</el-checkbox-group>\r\n\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: {\r\n      allOptions: Array,\r\n      allAgt: Array,\r\n      filterList:  Array\r\n    },\r\n\r\n    emits:[\"changeDisplayList\"],\r\n\r\n    data() {\r\n      return {\r\n        title: this.filterList.title,\r\n        checkAll: false,\r\n        checkedOptions: [],\r\n        options: this.allOptions, //应该从父组件中v-for得到\r\n        isIndeterminate: true\r\n      };\r\n    },\r\n\r\n    methods: {\r\n      handleCheckAllChange(val) {\r\n        this.checkedOptions = val ? this.topicOptions : []\r\n        this.isIndeterminate = false\r\n      },\r\n\r\n      handleCheckedOptionsChange(value) {\r\n        let checkedCount = value.length;\r\n        this.checkAll = checkedCount === this.options.length\r\n        this.isIndeterminate = checkedCount > 0 && checkedCount < this.options.length\r\n\r\n        //generate filter list\r\n        let tmpArr = []\r\n            for (let topic of this.checkedOptions) {\r\n            for (let agtObj of this.allAgt) {\r\n                if ( agtObj.topics.includes(topic) && !tmpArr.includes(agtObj)){\r\n                tmpArr.push(agtObj)\r\n                }\r\n            }\r\n            }\r\n            this.$emit('changeDisplayList', tmpArr)\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\nh3 {\r\n    font-size: 16px;\r\n    text-align: left;\r\n    padding-top: 20px;\r\n    margin-left: 60px;\r\n    margin-bottom: 0px;\r\n}\r\n\r\n.el-checkbox-group {\r\n    text-align: left;\r\n}\r\n\r\n.el-checkbox {\r\n    /* display: block;  */\r\n    padding-top: 20px;\r\n    margin-left: 60px;\r\n    margin-right: 25px;\r\n    width: 350px;\r\n    padding-left: 0px;\r\n    text-align: left;\r\n}\r\n\r\n.el-checkbox__label {\r\n  display: inline-block;\r\n  /* font-size: 12px; */\r\n}\r\n\r\n.el-checkbox, .el-checkbox__input {\r\n  white-space: normal;\r\n}\r\n\r\n.el-divider--vertical{\r\n  display:inline-block;\r\n  width:1px;\r\n  height:20em;\r\n  margin:0 8px;\r\n  vertical-align:middle;\r\n  position:relative;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}