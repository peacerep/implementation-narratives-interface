{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Search = _resolveComponent(\"Search\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  return _openBlock(), _createBlock(_component_el_autocomplete, {\n    modelValue: $data.state1,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.state1 = $event),\n    \"fetch-suggestions\": $options.querySearch,\n    clearable: \"\",\n    class: \"search-box\",\n    placeholder: \"Select Country\",\n    \"fit-input-width\": \"true\",\n    \"prefix-icon\": _ctx.Search,\n    onSelect: $options.handleSelect\n  }, {\n    append: _withCtx(() => [_createVNode(_component_el_button, null, {\n      default: _withCtx(() => [_createVNode(_component_el_icon, null, {\n        default: _withCtx(() => [_createVNode(_component_Search)]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"prefix-icon\", \"onSelect\"]);\n}","map":{"version":3,"mappings":";;;;;;uBACAA,aAiBoBC;gBAhBHC,YAAM;+DAANA,YAAM;IACd,mBAAiB,EAAEC,oBAAW;IAC/BC,SAAS,EAAT,EAAS;IACTC,KAAK,EAAC,YAAY;IAClBC,WAAW,EAAC,gBAAgB;IAC5B,iBAAe,EAAC,MAAM;IACrB,aAAW,EAAEC,WAAM;IACnBC,QAAM,EAAEL;;IAGJM,MAAM,WACX,MAEY,CAFZC,aAEYC;wBADV,MAA6B,CAA7BD,aAA6BE;0BAApB,MAAU,CAAVF,aAAUG","names":["_createBlock","_component_el_autocomplete","$data","$options","clearable","class","placeholder","_ctx","onSelect","append","_createVNode","_component_el_button","_component_el_icon","_component_Search"],"sourceRoot":"","sources":["C:\\OneDrive\\Implementation Report Interface\\implementation-tracker-vue\\implementation-tracker\\src\\components\\countrySearchBox.vue"],"sourcesContent":["<template>\r\n<el-autocomplete\r\n        v-model=\"state1\"\r\n        :fetch-suggestions=\"querySearch\"\r\n        clearable\r\n        class=\"search-box\"\r\n        placeholder=\"Select Country\"\r\n        fit-input-width=\"true\"\r\n        :prefix-icon=\"Search\"\r\n        @select=\"handleSelect\"\r\n      >\r\n    \r\n  <template #append>\r\n        <el-button>\r\n          <el-icon><Search /></el-icon>\r\n        </el-button>\r\n    </template>\r\n\r\n  </el-autocomplete>\r\n</template>\r\n\r\n<script>\r\nimport { Search } from '@element-plus/icons-vue';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport countries from '@/data/countries.json'\r\n\r\nexport default {\r\n    components: {Search},\r\n    data() {\r\n      return {\r\n        restaurants: [],\r\n        state1: '',\r\n        selected: '',\r\n        meta: {}\r\n      };\r\n    },\r\n\r\n    methods: {\r\n      querySearch(queryString, cb) {\r\n        var restaurants = this.restaurants;\r\n        var results = queryString ? restaurants.filter(this.createFilter(queryString)) : restaurants;\r\n        // 调用 callback 返回建议列表的数据\r\n        cb(results);\r\n      },\r\n      createFilter(queryString) {\r\n        return (restaurant) => {\r\n        return (restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\r\n        };\r\n      },\r\n\r\n      loadAll() {\r\n        return this.countryNameArr\r\n      },\r\n\r\n      handleSelect(item) {\r\n\r\n        this.selected = item.value;\r\n        this.meta = this.countryInfo[this.selected];\r\n\r\n        //router传值，国家名和附带信息\r\n        this.$router.push({\r\n          name:`country`,\r\n          query: {\r\n            title: `${this.selected}`,\r\n            metaInfo: `${this.countryInfo[this.selected]}`\r\n          }\r\n        })\r\n\r\n        // this.query();\r\n        console.log('选择的国家', this.selected);\r\n        console.log('选择的信息', this.meta)\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.restaurants = this.loadAll();\r\n    },\r\n\r\n    setup() {\r\n      const $router = useRouter();\r\n      console.log($router, 'router');\r\n\r\n      //read in data\r\n        let data = countries.countries;\r\n        let countryNameArr = [];\r\n        let countryInfo = [];\r\n\r\n        // console.log(\"国家数据\", data);\r\n\r\n        for(var i=0; i<data.length; i++){\r\n            var countryName = data[i].name;\r\n\r\n            countryNameArr.push({\"value\": data[i].name})\r\n            countryInfo[countryName] = data[i].metadata\r\n        }\r\n\r\n        // console.log(\"国家名称\",countryNameArr);\r\n        // console.log(\"国家信息\", countryInfo);\r\n\r\n        return {\r\n            data, countryNameArr, countryInfo\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n.search-box .el-autocomplete{\r\n  width: 300px;\r\n  .el-input-group {\r\n    display: inline;\r\n    width: 120%;\r\n  }\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}